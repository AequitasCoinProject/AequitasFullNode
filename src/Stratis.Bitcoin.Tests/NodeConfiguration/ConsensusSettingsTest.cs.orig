using Microsoft.Extensions.Logging;
using NBitcoin;
using Stratis.Bitcoin.Configuration;
using Stratis.Bitcoin.Configuration.Settings;
using Xunit;

namespace Stratis.Bitcoin.Tests.NodeConfiguration
{
    public class ConsensusSettingsTest
    {
        [Fact]
        public void LoadConfigWithAssumeValidHexLoads()
        {
<<<<<<< HEAD:src/Stratis.Bitcoin.Features.Consensus.Tests/ConsensusSettingsTest.cs
            uint256 validHexBlock = new uint256("00000000229d9fb87182d73870d53f9fdd9b76bfc02c059e6d9a6c7a3507031d");
            Network network = Network.BitcoinTest;
            NodeSettings nodeSettings = new NodeSettings(network, args:new string[] { $"-assumevalid={validHexBlock.ToString()}" });
            ConsensusSettings settings = new ConsensusSettings().Load(nodeSettings);
=======
            var validHexBlock = new uint256("00000000229d9fb87182d73870d53f9fdd9b76bfc02c059e6d9a6c7a3507031d");
            Network network = Network.TestNet;
            var nodeSettings = new NodeSettings(network, args:new string[] { $"-assumevalid={validHexBlock.ToString()}" });
            var settings = new ConsensusSettings(nodeSettings);
>>>>>>> d28fae69afb93a9962a0b60e6f1a74e695bf9481:src/Stratis.Bitcoin.Tests/NodeConfiguration/ConsensusSettingsTest.cs
            Assert.Equal(validHexBlock, settings.BlockAssumedValid);
        }

        [Fact]
        public void LoadConfigWithAssumeValidZeroSetsToNull()
        {
<<<<<<< HEAD:src/Stratis.Bitcoin.Features.Consensus.Tests/ConsensusSettingsTest.cs
            LoggerFactory loggerFactory = new LoggerFactory();
            Network network = Network.BitcoinTest;
            NodeSettings nodeSettings = new NodeSettings(network, args:new string[] { "-assumevalid=0" });
            ConsensusSettings settings = new ConsensusSettings().Load(nodeSettings);
=======
            var loggerFactory = new LoggerFactory();
            Network network = Network.TestNet;
            var nodeSettings = new NodeSettings(network, args:new string[] { "-assumevalid=0" });
            var settings = new ConsensusSettings(nodeSettings);
>>>>>>> d28fae69afb93a9962a0b60e6f1a74e695bf9481:src/Stratis.Bitcoin.Tests/NodeConfiguration/ConsensusSettingsTest.cs
            Assert.Null(settings.BlockAssumedValid);
        }

        [Fact]
        public void LoadConfigWithInvalidAssumeValidThrowsConfigException()
        {
<<<<<<< HEAD:src/Stratis.Bitcoin.Features.Consensus.Tests/ConsensusSettingsTest.cs
            LoggerFactory loggerFactory = new LoggerFactory();
            Network network = Network.BitcoinTest;
            NodeSettings nodeSettings = new NodeSettings(network, args:new string[] { "-assumevalid=xxx" });
            Assert.Throws<ConfigurationException>(() => new ConsensusSettings().Load(nodeSettings));
=======
            var loggerFactory = new LoggerFactory();
            Network network = Network.TestNet;
            var nodeSettings = new NodeSettings(network, args:new string[] { "-assumevalid=xxx" });
            Assert.Throws<ConfigurationException>(() => new ConsensusSettings(nodeSettings));
>>>>>>> d28fae69afb93a9962a0b60e6f1a74e695bf9481:src/Stratis.Bitcoin.Tests/NodeConfiguration/ConsensusSettingsTest.cs
        }

        [Fact]
        public void LoadConfigWithDefaultsSetsToNetworkDefault()
        {
            Network network = Network.StratisMain;
            var settings = new ConsensusSettings(NodeSettings.Default(network));
            Assert.Equal(network.Consensus.DefaultAssumeValid, settings.BlockAssumedValid);

            network = Network.StratisTest;
            settings = new ConsensusSettings(NodeSettings.Default(network));
            Assert.Equal(network.Consensus.DefaultAssumeValid, settings.BlockAssumedValid);

<<<<<<< HEAD:src/Stratis.Bitcoin.Features.Consensus.Tests/ConsensusSettingsTest.cs
            network = Network.BitcoinMain;
            settings = new ConsensusSettings().Load(NodeSettings.Default(network));
            Assert.Equal(network.Consensus.DefaultAssumeValid, settings.BlockAssumedValid);

            network = Network.BitcoinTest;
            settings = new ConsensusSettings().Load(NodeSettings.Default(network));
=======
            network = Network.Main;
            settings = new ConsensusSettings(NodeSettings.Default(network));
            Assert.Equal(network.Consensus.DefaultAssumeValid, settings.BlockAssumedValid);

            network = Network.TestNet;
            settings = new ConsensusSettings(NodeSettings.Default(network));
>>>>>>> d28fae69afb93a9962a0b60e6f1a74e695bf9481:src/Stratis.Bitcoin.Tests/NodeConfiguration/ConsensusSettingsTest.cs
            Assert.Equal(network.Consensus.DefaultAssumeValid, settings.BlockAssumedValid);
        }
    }
}
